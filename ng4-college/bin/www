#!/usr/bin/env node

/**
 * Module dependencies.
 */
 if (!process.env.NODE_ENV) require('babel-register')({
 	presets: ['babel-preset-node6'],
 	plugins: ['transform-async-to-generator'],
 });
 
const app = require('../app');
const logger = require('../utils/logger')('www');
const http = require('http');
// var models = require('../models');
// var dataInit = require('../scripts/data-init');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8003');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// models.sequelize.sync({
// 		force: false
// 	})
// 	.then(function() {
// 		// init role, member data
// 		//  dataInit();
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);
// 	});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ?
		`Pipe ${port}` :
		`Port ${port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ?
		`pipe ${addr}` :
		`port ${addr.port}`;
	logger.debug(`Listening on ${bind}`);
}
